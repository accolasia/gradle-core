import com.bancvue.gradle.maven.DefaultPublishFilter
import org.apache.ivy.core.module.descriptor.Artifact
import org.gradle.api.publication.maven.internal.PomFilter

buildscript {
	repositories {
		mavenCentral()
		maven { url "https://oss.sonatype.org/content/groups/public"}
	}
	dependencies {
		classpath 'com.github.townsfolk:gradle-release:1.2'
	}
}

apply plugin: 'release'
apply plugin: "bancvue-oss"
apply plugin: "integration-test"

repositories {
	mavenCentral()
}

dependencies {
	compile localGroovy()
	compile gradleApi()
	compile ("nl.javadude.gradle.plugins:license-gradle-plugin:0.9.0") {
		exclude group: 'com.google.guava'
	}

	mainTestCompile('org.spockframework:spock-core:0.7-groovy-1.8') {
		exclude group: 'org.codehaus.groovy'
	}
	mainTestCompile 'cglib:cglib-nodep:2.2.2'
	mainTestCompile 'org.objenesis:objenesis:1.3'
}

check.dependsOn integrationTest

license {
	ext.name = "BancVue, LTD"
	skipExistingHeaders true
}

[licenseMain, licenseFormatMain]*.exclude "licenses/*"
// exclude the test kit source which was copied from a different project (https://github.com/alkemist/gradle-test-kit)
// and has it's own license
[licenseMainTest, licenseFormatMainTest]*.exclude "org/gradle/testkit/**"



/**********************************************************************************************************************/
// Everything below is POC

artifacts {
	archives jarMainTest
	archives sourcesJarMainTest
}

uploadArchives {
	repositories.mavenDeployer {

		pom.project {
			packaging "jar"
			url "https://github.com/BancVue/GradlePluginsCore"
			developers {
				developer {
					id "bancvue_oss"
					name "BancVue Open Source Development"
					email "opensource@bancvue.com"
				}
			}
			scm {
				url "https://github.com/BancVue/GradlePluginsCore.git"
				connection "scm:git:git@github.com:BancVue/GradlePluginsCore.git"
				developerConnection "scm:git:git@github.com:BancVue/GradlePluginsCore.git"
			}
		}
	}
}

uploadArchives {
	repositories.mavenDeployer {
		addFilter("test") { Artifact artifact, file ->
			(artifact.name =~ /.*-test$/).matches()
		}
		addFilter("default", new DefaultPublishFilter(it))

		getActivePomFilters().each { PomFilter pomFilter ->
			pomFilter.setPomTemplate(pom.effectivePom)
		}
	}
}

install {
	repositories.mavenInstaller {
		addFilter("test") { Artifact artifact, file ->
			(artifact.name =~ /.*-test$/).matches()
		}
		addFilter("default", new DefaultPublishFilter(it))
	}
}
